%% Test 1
N = 5;
K = 1;
psmix = [5.69322879; 10.34707154;  7.28589838;  7.28589838; 10.34707154];
mumix = 0.04164962198820365;
Bmix = [3.86926394,  3.75393181, 0.76951695,  0.76951695, 3.75393181;
        3.75393181,  3.75393181, 1.10766601+9.11979295i, -0.38176641+1.35677705i, 1.10766601+9.11979295i;
        0.76951695,  1.10766601-9.11979295i, 0.76951695, -0.38176641+1.35677705i, -0.38176641+1.35677705i;
        0.76951695, -0.38176641-1.35677705i, -0.38176641-1.35677705i,  0.76951695, 1.10766601+9.11979295i;
        3.75393181,  1.10766601-9.11979295i, -0.38176641-1.35677705i,  1.10766601-9.11979295i, 3.75393181];
sigma = 1;

tuple.X = euclideanfactory(N, K);
tuple.p = multinomialfactory(K);
manifold = productmanifold(tuple);
problem.M = manifold;

problem.costgrad = @(Xp, store) costgrad(Xp, Bmix, psmix, mumix, sigma, manifold, store);

X0 = [1 2 3 4 5];
p0 = ones(1);
XP0.X = X0;
XP0.p = p0;

opts = struct();
opts.maxiter = 200;
opts.tolgradnorm = 1e-7;
opts.tolcost = 1e-18;

[XP_est, cost] = trustregions(problem, XP0, opts);
% 
% X = [1 2 3 4 5;
%     0 1 0 1 0;
%     1 1 1 1 1];
% 
% for i = 1:3
%     Xp.X = transpose(X(i,:));
%     Xp.p = ones(1);
%     store = struct();
%     [f, gradf, store] = cost_grad(Xp, store);
% end

%% Test 2
n = 5;
L = randi([5,50],1,n);
K = 1;
M = 500;
for i = 1:n
    x_true = randn(L(i),1);
    % Noise level
    sigma = 0.1;
    shift = -1; % shift set to -1 to enable cyclic shifts
    % Generate the data
    data = generate_observations_het(x_true, M, sigma, shift);
    
    w = ones(M, 1);
    w = w / sum(w);
    [mumix, psmix, Bmix] = invariants_from_data_no_debias(data, w);
    
    tuple.X = euclideanfactory(L(i), K);
    tuple.p = multinomialfactory(K);
    manifold = productmanifold(tuple);
    problem.M = manifold;

    cost_grad = @(Xp, store) costgrad(Xp, Bmix, psmix, mumix, sigma, manifold, store);
    Xp.X = x_true;
    Xp.p = ones(K);
    store = struct();
    [f, gradf, store] = cost_grad(Xp, store);
    disp(L(i));
    cost = f/L(i);
    disp('cost')
    disp(cost)
    gradnorm = norm(gradf.X)/L(i);
    disp('grad norm')
    disp(gradnorm)
end 

%% Functions 
function [f, gradf, store] = costgrad(Xp, Bmix, psmix, mumix, sigma, manifold, store)

    if ~isfield(store, 'cost') || ~isfield(store, 'grad')

        X = Xp.X;
        p = Xp.p;

        [N, K] = size(X);

        % Bias matrix pattern for Bmix
        A = eye(N);
        A(1, :) = A(1, :) + 1;
        if isreal(X)
            A(:, 1) = A(:, 1) + 1;
        end

        FX = fft(X);
        absFXsq = abs(FX).^2;

        B = zeros(N, N, K);

        M1 = mean(X*p);
        M2 = absFXsq*p + N*sigma^2*ones(N, 1);
        M3 = N^2*sigma^2*mumix*A; % Choose whether to use M1 or mumix here.
        for k = 1 : K
            y = FX(:, k);
            B(:, :, k) = (y*y') .* circulant(y) ; % = bispectrum_from_signal(X(:, k));
            M3 = M3 + p(k) * B(:, :, k);
        end

        % Precompute, because costs O(N^2) and needed K times, for a total
        % of O(KN^2), which is the overall complexity of this function.
        M3_min_Bmix = M3 - Bmix;

        a1 = N^2; % would be 1 but we work with the mean instead of DC component.
        a2 = (N*(2+sigma^2))^-1;
        a3 = (N^2*(3+sigma^4))^-1;
        
        
        scale = 3+sigma^4; %N*sigma^6; % to normalize coefficient a3 to scale*a3 = 1/N^2, which is our previous weight.
        
        
        
        f = .5*(a1*(M1 - mumix)^2  +  ...
                a2*norm(M2 - psmix, 2)^2  +  ...
                a3*norm(M3_min_Bmix, 'fro')^2 );

        f = scale * f;
            
        store.cost = f;
        
        

        gradX = (a1/N)*(M1-mumix)*repmat(p', [N, 1]) + ...
                2*N*a2*ifft( ((M2-psmix)*p') .* FX );

        gradp = (a1/N)*(M1-mumix)*sum(X)' + ...
                a2*absFXsq'*(M2 - psmix);

        for k = 1 : K

            y = FX(:, k);

            gradX(:, k) = gradX(:, k) + a3 * p(k) * DBx_adj(y, M3_min_Bmix);

            gradp(k) = gradp(k) + a3 * inner(M3_min_Bmix, B(:, :, k));

        end

        if isreal(X)
            gradX = real(gradX);
        end

        gradf.X = scale * gradX;
        gradf.p = scale * gradp;

        gradf = manifold.egrad2rgrad(Xp, gradf);

        store.grad = gradf;
        
        
    else
        
        f = store.cost;
            
        gradf = store.grad;
        
    end

end

% Adjoint of the differential of bispectrum_from_signal applied to a matrix
% W, where the input y is the fft of x.
function z = DBx_adj(y, W)
    % y = fft(x)
    % B(x) = yy' .* circulant(y)
    % F = fft(eye(N)); F' == N*ifft(eye(N))
    N = length(y);
    H = W .* circulant(conj(y));
    z = N*ifft( circulantadj(W.*conj(y*y')) + (H+H')*y );
end

% Real inner product for complex matrices
function v = inner(A, B)
    v = real(A(:)'*B(:));
end

